//---------------------------------------------------------------------------
// File: packcage.h
// By:   SnipGhost
//                                                         Библиотека функций
//---------------------------------------------------------------------------
#pragma once
#ifndef PACKCAGE_H
#define PACKCAGE_H
//---------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <iomanip>
#include <conio.h>   // Для getch()
#include <Windows.h> // Итак прилинкуется, однако фиг с ним, пусть будет
//---------------------------------------------------------------------------
using namespace std;
//---------------------------------------------------------------------------
const int MAX_TEXT_LEN = 1024; // Максимальная длина текста
const char SEOT_SYMBOL = 0x1a; // Специальный символ завершения текста (^Z)
const char BEEP_SYMBOL = 0x07; // Символ вывода сигнала
const char BACK_SYMBOL = 0x08; // Символ возврата (удаления) символа
//---------------------------------------------------------------------------
const char ALL_DELIMS[] = " ,.-:;"; // Набор разрешенных символов пунктуации
const bool DEBUG = 1; // Вывоод отладочной информации - да/нет (1/0)
//---------------------------------------------------------------------------
struct Word 
{
	char *symbols;    // Массив символов слова
	int attr;         // Атрибуты слова
	bool flag;        // Флаг общего назначения (Ф.О.Н.)
	~Word();          // Очистка памяти
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Классическая перегрузка оператора <<
	friend ostream& operator <<(ostream &os, const Word &n)
	{
		os << n.symbols;
		return os;
	}
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	// Удобная перегрузка оператора << (для указателей)
	friend ostream& operator <<(ostream &os, const Word *n)
	{
		os << n->symbols;
		if (n->attr) 
			os << (char)n->attr; // Довыводим атрибуты
		return os;
	}
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
};
//---------------------------------------------------------------------------
struct Sentence
{
	Word **word;      // Массив указателей на слова
	int size;         // Кол-во слов в предложении
	~Sentence();      // Очистка памяти
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	friend ostream& operator <<(ostream &os, const Sentence &n)
	{
		for (int i = 0; i < n.size; ++i)
		{
			os << *(n.word[i]); // Вызываем вывод без атрибутов
			if (i != n.size-1) os << " ";
		}
		return os;
	}
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	friend ostream& operator <<(ostream &os, const Sentence *n)
	{
		for (int i = 0; i < n->size; ++i)
		{
			os << n->word[i]; // Вызываем вывод с атрибутами
			if (i != n->size-1) os << " ";
			else os << '.';
		}
		return os;
	}
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
};
//---------------------------------------------------------------------------
struct Text
{
	Sentence **sent; // Массив указателей на предложения
	int size;        // Кол-во предложений в тексте
	~Text();         // Очистка памяти
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	friend ostream& operator <<(ostream &os, const Text &n)
	{
		for (int i = 0; i < n.size; ++i)
		{
			os << *(n.sent[i]); // Вызываем вывод без атрибутов
			if (i != n.size-1) os << " ";
			else os << "\n";
		}
		return os;
	}
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	friend ostream& operator <<(ostream &os, const Text *n)
	{
		for (int i = 0; i < n->size; ++i)
		{
			os << n->sent[i]; // Вызываем вывод с атрибутами
			if (i != n->size-1) os << " ";
			else os << "\n";
		}
		return os;
	}
	//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
};
//---------------------------------------------------------------------------
char* inputText();                      // Ввод и проверка текста
Text* getText(const char *txt);         // Формирование текста
Sentence* getSentence(const char *txt); // Формирование предложения
Word* getWord(const char *txt);         // Формирование слова
//---------------------------------------------------------------------------
void say(const char *msg);              // Вспомогательная функция вывода
void printText(Text *text);             // Вывод информации о тексте
//---------------------------------------------------------------------------
#endif /* PACKCAGE_H */
//---------------------------------------------------------------------------